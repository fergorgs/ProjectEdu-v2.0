import React, { useEffect, useState } from 'react';
import isEqual from 'react-fast-compare';
import { FlatList, TouchableWithoutFeedback, View } from 'react-native';
import globalHook from 'use-global-hook';
const actions = {
    setOpenedNode: (store, { internalId, opened }) => {
        store.setState({
            nodesState: Object.assign(Object.assign({}, store.state.nodesState), { [internalId]: opened }),
        });
    },
};
const useGlobal = globalHook(React, {
    nodesState: { root: true },
}, actions);
const NodeView = React.memo(({ renderNode, extraData, level, getChildrenName, node, onNodePressed, keepOpenedState, }) => {
    const [globalState, globalActions] = useGlobal();
    // tslint:disable-next-line:variable-name
    const [_node, setNode] = useState(Object.assign(Object.assign({}, node), { opened: keepOpenedState && globalState.nodesState[node._internalId]
            ? globalState.nodesState[node._internalId]
            : node.opened }));
    useEffect(() => {
        setNode(Object.assign(Object.assign({}, node), { opened: _node.opened }));
    }, [node]);
    // tslint:disable-next-line:variable-name
    const _onNodePressed = () => {
        if (keepOpenedState) {
            globalActions.setOpenedNode({
                internalId: _node._internalId,
                opened: !_node.opened,
            });
        }
        setNode(Object.assign(Object.assign({}, _node), { opened: !_node.opened }));
        if (onNodePressed) {
            onNodePressed(_node);
        }
    };
    // tslint:disable-next-line:variable-name
    const renderChildren = (item, _level) => {
        return (<NodeView getChildrenName={getChildrenName} node={item} level={_level + 1} extraData={extraData} onNodePressed={onNodePressed} renderNode={renderNode} keepOpenedState={keepOpenedState}/>);
    };
    const renderItem = ({ item }) => renderChildren(item, level);
    const rootChildrenName = getChildrenName(_node);
    const rootChildren = _node[rootChildrenName];
    const isNodeOpened = (keepOpenedState && globalState.nodesState[node._internalId]) ||
        _node.opened;
    return (<>
                {!_node.hidden ? (<TouchableWithoutFeedback onPress={_onNodePressed}>
                        <View>{renderNode(_node, level)}</View>
                    </TouchableWithoutFeedback>) : null}
                {isNodeOpened && rootChildren ? (<FlatList data={rootChildren} renderItem={renderItem} extraData={extraData} keyExtractor={(item) => item._internalId}/>) : null}
            </>);
}, isEqual);
export default NodeView;
//# sourceMappingURL=NodeView.js.map